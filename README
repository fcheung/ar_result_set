ArResultSet
===========

Testing ground for introducing a result-set proxy to ActiveRecord and then doing cool stuff with it.

If you are using Rails 2.1, then do not use in combination with has_one :through associations as a bug in preloading these associations will cause infinite recursion (fixed in http://github.com/rails/rails/commit/b7a37b742c0abd1df8ea48cc82f76385cc0c41ea)

Some types of associations produce unreliable results when eager loaded (eg has_many with limits) and so may produce undefined results. In the case of has_many with limits the plugin enforces this (ie lets the normal rails code run)

The Fun Stuff
=============

You find calls look the same, but they now return a proxy object. Right now this allows you todo

users = User.find :all, ...
users.load {:projects => :milestones}

to eager load a users projects and the milestones from that project.

Better still:

doing users[0].projects will guess that you want to access projects for everyone and go ahead and load that

and users[0].projects[0].milestones would load all milestones for all projects for all of the users.

When a find is done a record tracks the result set it was part of via its result_set variable. This has obvious garbage collection
implications which have been completely ignored.

A important consequence of this is that most of the time (basically whenever you have a record that was loaded as part of a collection of more than one element (collection at the point of load from the database - if 10 records turn into 10 one element has_manys then that still counts as a collection of 10 elements)) you associations will be eager loaded. If there are any subtle differences between eager loading and "normal" loading you'll be finding about them soon. At the time of writing, has many :through is slightly different with regards to order and condition options. There is no way to not get associations eager loaded if you have a problematic one.

Copyright (c) 2008 Frederick Cheung, released under the MIT license
